package project;

/**
 * TECHNOLOGICAL EDUCATIONAL INSTITUTE OF MESSOLONGHI.
 * 
 * HTML Optimization Statistics Algorithm by George Michalitsis & Kiriakos Mpiziklis 2014.
 * 
 * You may use this code any way you wish, private, educational, or commercial.
 * It's free. See: https://github.com/GM-Revan/PROJECT-HTML-OPTIMIZE/blob/master/HTML_PARSER2.java
 * 
 */
import java.io.File;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeVisitor;
import org.apache.commons.io.output.TeeOutputStream;

import com.googlecode.htmlcompressor.compressor.HtmlCompressor;

public class JExcelAPIDemo {
	static int domcounter = 0, domav = 0, domax = 0, tables = 0, pluser = 1,
			html5count = 53;

	// MAIN PROGRAM
	public static void main(String[] args) throws BiffException, IOException,
			WriteException {
		Document doc;
		// HtmlCompressor compressor = new HtmlCompressor();
		WritableWorkbook wworkbook;
		wworkbook = Workbook.createWorkbook(new File("c:/Report.xls"));
		WritableSheet wsheet = wworkbook.createSheet("First Sheet", 0);

		// TeeoutputStream File writer

		try {

			File f = new File("c:/Output.txt");
			if (!f.exists()) {
				try {
					f.createNewFile();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			try {
				FileOutputStream fos = new FileOutputStream(f);

				// we will want to print in standard "System.out" and in "file"

				TeeOutputStream myOut = new TeeOutputStream(System.out, fos);
				PrintStream ps = new PrintStream(myOut);
				System.setOut(ps);
			} catch (Exception e) {
				e.printStackTrace();
			}

			// TeeoutputStream File writer

			// Connect to TXT Link

			File link = new File("C:/links.txt");
			String line1 = null;

			Scanner bigscanner = new Scanner(link);
			while (bigscanner.hasNextLine()) {
				line1 = bigscanner.nextLine();
				System.out.println("Link: " + line1);
				Label label = new Label(0, 0, "Link: ");
				wsheet.addCell(label);
				label = new Label(pluser, 0, line1);
				wsheet.addCell(label);

				doc = Jsoup.connect(line1).timeout(10 * 4000)
						.ignoreHttpErrors(true).followRedirects(true).get();
				// Connect to TXT Link
				int c = 0, commentsAmount = 0;

				// Whitespace count

				String doctoString = doc.toString();
				int countBlank = 0;

				for (int i = 0; i < doctoString.length(); i++) {
					if (Character.isWhitespace(doctoString.charAt(i))) {
						countBlank++;
					}
				}

				// Whitespace count
				// flash inside HTML
				int flash = 0;

				for (Element vers : doc.select("[content*=.swf]")) {
					flash++;

				}
				for (Element vers : doc.select("[src*=.swf]")) {
					flash++;
				}

				for (Element scriptElement : doc.getElementsByTag("script")) {
					String elemenscript = scriptElement.toString();
					if (elemenscript.contains(".swf")) {
						flash++;
						break;

					}
				}

				// flash inside HTML

				// Version

				List<Node> nods = doc.childNodes();
				for (Node node : nods) {
					if (node instanceof DocumentType) {
						DocumentType documentType = (DocumentType) node;
						if (documentType.attr("publicid").length() > 1) {
							label = new Label(0, 1, "Version: ");
							wsheet.addCell(label);
							label = new Label(pluser, 1,
									documentType.attr("publicid"));
							wsheet.addCell(label);
						} else {
							label = new Label(0, 1, "Version:");
							wsheet.addCell(label);
							label = new Label(pluser, 1, "Html 5");
							wsheet.addCell(label);

						}

					}
				}
				// Version

				// Comments
				int comchar = 0;
				for (Element e : doc.getAllElements()) {
					for (Node n : e.childNodes()) {
						if (n instanceof Comment) {
							comchar = comchar + n.toString().length();
							commentsAmount++;

						}
					}
				}
				// Comments

				/**
				 * // Duplicate IDs String idname2; List<String> idlist = new
				 * LinkedList<String>(); for (Element element2 :
				 * doc.getAllElements()) { idname2 = element2.id();
				 * idlist.add(idname2.toString()); } // Duplicate IDs
				 */
				// IdLength
				float tid = 0;
				List<String> idval = new ArrayList<String>();
				String idname;
				int idcounter = 0;
				float l = 0, average2 = 0;
				for (Element element2 : doc.getAllElements()) {
					idname = element2.id();
					if (idname.length() > 0)
						idcounter++;
					idval.add(idname.toString());

				}

				for (String pointer : idval) {
					average2 = pointer.length() + average2;
					l++;
				}
				if (average2 != 0) {
					tid = average2 / l;
				}
				// IdLength

				// Classlength
				float g = 0, average = 0;
				float tclass = 0;
				int classcounter = 0;
				List<String> classval = new ArrayList<String>();
				for (Element element2 : doc.getAllElements()) {
					for (String attribute : element2.classNames()) {

						if (attribute.length() > 0) {
							classcounter++;
							classval.add(attribute.toString());
						}
					}
				}
				int disclass = new HashSet<String>(classval).size();
				for (String pointer : classval) {
					average = pointer.length() + average;
					g++;
				}
				if (average != 0) {
					tclass = average / g;
				}
				// Classlength

				// Attribute values
				int totalval = 0;
				List<String> attval = new ArrayList<String>();
				for (Element element : doc.getAllElements()) {
					for (org.jsoup.nodes.Attribute attribute : element
							.attributes()) {
						String lol = attribute.getValue();
						attval.add(lol.toString());
						if (lol != null && !lol.isEmpty()) {
							totalval++;
						}
					}
				}
				int valuenum = new HashSet<String>(attval).size();
				// Attribute values

				// DOM
				doc.traverse(new NodeVisitor() {
					public void head(Node node, int depth) {
						if (!(node instanceof TextNode)) {
							domav = domav + depth;
							domcounter++;
							if (domax < depth) {
								domax = depth;
							}
						}
					}

					public void tail(Node node, int depth) {
					}
				});
				int totaldom = domav / domcounter;
				// DOM

				// External Css
				int countchars = 0;
				for (Element element : doc.select("[rel]")) {
					if (element.attr("rel").contains("stylesheet")) {
						countchars = element.toString().length() + countchars;
						c++;
					}
				}

				// retrieve external Css
				Document doccss;
				int uncomprcss = 0, comprcss = 0;
				String compresscss;
				for (Element element : doc.getElementsByTag("link")) {
					for (Element csselement : element
							.getElementsByAttributeValue("rel", "stylesheet")) {
						String absUrl = element.absUrl("href");
						if (absUrl.length() > 0) {
							doccss = Jsoup.connect(absUrl)
									.ignoreContentType(true).timeout(10 * 4000)
									.ignoreHttpErrors(true).get();
							;
							uncomprcss = uncomprcss
									+ doccss.toString().length();
							/**
							 * compressor.setCompressCss(true); compresscss =
							 * compressor .compress(doccss.toString()); comprcss
							 * = comprcss + compresscss.length();
							 **/
						}

					}
				}
				// retrieve external css

				// external Css
				// css head
				Element s = doc.body(), s2 = doc.head();
				int numhead = 0;
				for (Element element : s2.select("[rel]")) {
					if (element.attr("rel").contains("stylesheet")) {
						numhead++;
					}
				}
				int d = 0, stylebody = s.getElementsByTag("style").size()
						+ s.getElementsByAttribute("style").size(), stylehead = s2
						.getElementsByTag("style").size()
						+ s2.getElementsByAttribute("style").size();
				for (Element element : s.select("[rel]")) {
					if (element.attr("rel").contains("stylesheet")) {
						d++;
					}
				}

				int total = d + stylebody;
				String name;
				if (total > 0) {
					name = "FALSE";
				} else {
					name = "TRUE";
				}

				// css head
				// styles
				int style = doc.getElementsByTag("style").size()
						+ doc.getElementsByAttribute("style").size();
				// styles

				// scripts external head body comments

				int se = 0, se2 = 0;
				Element scr = doc.head();
				Element scr2 = doc.body();

				List<String> scriptinline = new ArrayList<String>();
				for (Element element : doc.getElementsByTag("script")) {
					if (!element.hasAttr("src")) {
						scriptinline.add(element.toString());

					}
				}
				/**
				 * compressor.setCompressJavaScript(true); String compressedHtml
				 * = compressor.compress(scriptinline .toString());
				 **/
				Elements src = scr.select("script");
				// retrieve external Scripts
				Document docscript;
				int extcharcount = 0, uncomprscript = 0;
				String compressedscripts;
				for (Element element : doc.getElementsByTag("script")) {
					String absUrl = element.absUrl("src");
					if (absUrl.length() > 0) {
						docscript = Jsoup.connect(absUrl)
								.ignoreContentType(true).timeout(10 * 4000)
								.ignoreHttpErrors(true).get();
						;

						if (!(docscript.toString().contains("window.Modernizr")
								|| docscript.toString()
										.contains("var MooTools") || docscript
								.toString().contains("jquery.org"))) {

							/**
							 * compressedscripts = compressor.compress(docscript
							 * .toString());
							 * 
							 * extcharcount = extcharcount +
							 * compressedscripts.length();
							 **/
							uncomprscript = uncomprscript
									+ docscript.toString().length();
						}
					}

				}
				// retrieve external Scripts
				for (Element element : src.select("script[src]")) {
					se++;
				}
				Elements src2 = scr2.select("script");
				for (Element element : src2.select("script[src]")) {
					se2++;
				}
				// scripts external head body comments

				// HTML5 Tags
				File text = new File("C:/html5tags.txt");
				int h = 0;
				try {

					Scanner scanner = new Scanner(text);
					while (scanner.hasNextLine()) {
						String line = scanner.nextLine();
						h = doc.select(line).size() + h;
					}
					scanner.close();
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
				// HTML5 Tags

				// HTML5 Distinct Tags

				int dtags5 = 0;
				File tags5 = new File("C:/html5tags.txt");
				try {

					Scanner scanner = new Scanner(tags5);

					while (scanner.hasNextLine()) {
						String line = scanner.nextLine();
						if (doc.getElementsByTag(line).size() > 0)
							dtags5++;
					}
					scanner.close();
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
				// HTML5 Distinct Tags

				// tags
				List<String> tags = new ArrayList<String>();
				for (Element e : doc.getAllElements()) {
					tags.add(e.tagName().toLowerCase());
				}
				int dt = new HashSet<String>(tags).size();
				// tags
				// Total and Distinct Attributes
				int att = 0;
				List<String> atts = new ArrayList<String>();
				for (Element element : doc.getAllElements()) {
					for (org.jsoup.nodes.Attribute attribute : element
							.attributes()) {
						attribute.setValue("0");
						atts.add(attribute.toString());
						att++;
					}
				}
				int da = new HashSet<String>(atts).size();
				// Total and Distinct Attributes
				// Output

				label = new Label(0, 2, "Total Comments:");
				wsheet.addCell(label);
				Number number = new Number(pluser, 2, commentsAmount);
				wsheet.addCell(number);
				label = new Label(0, 3, "Scripts inside HTML:");
				wsheet.addCell(label);
				number = new Number(pluser, 3, +doc.getElementsByTag("script")
						.size());
				wsheet.addCell(number);
				label = new Label(0, 4, "External Scripts inside Head:");
				wsheet.addCell(label);
				number = new Number(pluser, 4, +se);
				wsheet.addCell(number);
				label = new Label(0, 5, "External Scripts inside Body:");
				wsheet.addCell(label);
				number = new Number(pluser, 5, +se2);
				wsheet.addCell(number);
				label = new Label(0, 6, "Internal Scripts inside Head:");
				wsheet.addCell(label);
				number = new Number(pluser, 6, +(scr.getElementsByTag("script")
						.size() - se));
				wsheet.addCell(number);
				label = new Label(0, 7, "Internal Scripts inside Body:");
				wsheet.addCell(label);
				number = new Number(pluser, 7, +(scr2
						.getElementsByTag("script").size() - se2));
				wsheet.addCell(number);
				label = new Label(0, 8, "Total Tags:");
				wsheet.addCell(label);
				number = new Number(pluser, 8, +doc.getAllElements().size());
				wsheet.addCell(number);
				label = new Label(0, 9, "Distinct Tags:");
				wsheet.addCell(label);
				number = new Number(pluser, 9, +dt);
				wsheet.addCell(number);
				label = new Label(0, 10, "HTML 5 Total tags:");
				wsheet.addCell(label);
				number = new Number(pluser, 10, +h);
				wsheet.addCell(number);
				label = new Label(0, 11, "HTML 5 Distinct Tags:");
				wsheet.addCell(label);
				number = new Number(pluser, 11, +dtags5);
				wsheet.addCell(number);

				try {

					Scanner scanner = new Scanner(text);
					while (scanner.hasNextLine()) {
						String line = scanner.nextLine();
						h = doc.select(line).size() + h;
						if (doc.select(line).size() > 0) {

							System.out.println("Html5 Tagname:" + line);
							/**
							 * label = new Label(0, html5count, line);
							 * wsheet.addCell(label); number = new
							 * Number(pluser, html5count, doc.select(
							 * line).size()); wsheet.addCell(number);
							 * html5count++;
							 **/
							System.out.println("Html5 tag appearance:"
									+ doc.select(line).size() + "\n");

						}
					}

				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
				label = new Label(0, 12, "Total Attributes:");
				wsheet.addCell(label);
				number = new Number(pluser, 12, +att);
				wsheet.addCell(number);
				label = new Label(0, 13, "Distinct Attributes:");
				wsheet.addCell(label);
				number = new Number(pluser, 13, +da);
				wsheet.addCell(number);
				label = new Label(0, 13, "Distinct Attributes:");
				wsheet.addCell(label);
				number = new Number(pluser, 13, +totalval);
				wsheet.addCell(number);
				label = new Label(0, 14, "Distinct Attribute Values:");
				wsheet.addCell(label);
				number = new Number(pluser, 14, +valuenum);
				wsheet.addCell(number);
				label = new Label(0, 15, "Styles inside HTML:");
				wsheet.addCell(label);
				number = new Number(pluser, 15, +style);
				wsheet.addCell(number);
				label = new Label(0, 16, "Total Style Tags:");
				wsheet.addCell(label);
				number = new Number(pluser, 16, +doc.getElementsByTag("style")
						.size());
				wsheet.addCell(number);
				label = new Label(0, 17, "Total Style Atts:");
				wsheet.addCell(label);
				number = new Number(pluser, 17, +doc.getElementsByAttribute(
						"style").size());
				wsheet.addCell(number);
				label = new Label(0, 18, "External CSS Files:");
				wsheet.addCell(label);
				number = new Number(pluser, 18, +c);
				wsheet.addCell(number);
				label = new Label(0, 19, "CSS Inside Head:");
				wsheet.addCell(label);
				label = new Label(pluser, 19, name);
				wsheet.addCell(label);
				label = new Label(0, 20, "Styles(tags and atts) Inside Body:");
				wsheet.addCell(label);
				number = new Number(pluser, 20, +stylebody);
				wsheet.addCell(number);
				label = new Label(0, 21, "Styles(tags and atts) Inside Head:");
				wsheet.addCell(label);
				number = new Number(pluser, 21, +stylehead);
				wsheet.addCell(number);
				label = new Label(0, 22, "External CSS Inside Head:");
				wsheet.addCell(label);
				number = new Number(pluser, 22, +numhead);
				wsheet.addCell(number);
				label = new Label(0, 23, "External CSS Inside Body:");
				wsheet.addCell(label);
				number = new Number(pluser, 23, +d);
				wsheet.addCell(number);
				label = new Label(0, 24, "DOM Average Depth");
				wsheet.addCell(label);
				number = new Number(pluser, 24, +totaldom);
				wsheet.addCell(number);
				label = new Label(0, 25, "DOM Max Depth:");
				wsheet.addCell(label);
				number = new Number(pluser, 25, +domax);
				wsheet.addCell(number);
				label = new Label(0, 26, "Total ID Names:");
				wsheet.addCell(label);
				number = new Number(pluser, 26, +idcounter);
				wsheet.addCell(number);
				label = new Label(0, 27, "Total Class Names:");
				wsheet.addCell(label);
				number = new Number(pluser, 27, +classcounter);
				wsheet.addCell(number);
				label = new Label(0, 28, "Total Distinct Class Names:");
				wsheet.addCell(label);
				number = new Number(pluser, 28, +disclass);
				wsheet.addCell(number);
				label = new Label(0, 29, "Class Average Length:");
				wsheet.addCell(label);
				number = new Number(pluser, 29, +tclass);
				wsheet.addCell(number);
				label = new Label(0, 30, "ID Average Length:");
				wsheet.addCell(label);
				number = new Number(pluser, 30, +tid);
				wsheet.addCell(number);
				label = new Label(0, 31, "JApplets inside html:");
				wsheet.addCell(label);
				number = new Number(pluser, 31, +doc.getElementsByTag("applet")
						.size());
				wsheet.addCell(number);
				label = new Label(0, 32, "Flash Content inside HTML:");
				wsheet.addCell(label);
				number = new Number(pluser, 32, +flash);
				wsheet.addCell(number);
				label = new Label(0, 33, "Nested tables:");
				wsheet.addCell(label);
				number = new Number(pluser, 33, +doc.select("table table")
						.size());
				wsheet.addCell(number);

				// Output
				/**
				 * System.out.println("Duplicate IDs are " +
				 * findDuplicates(idlist));
				 **/

				// Count Chars
				File file = new File("c:/HTML.txt");

				int Countchar = doctoString.length();
				Elements scriptcount = doc.getElementsByTag("script");
				int countscriptchar = scriptcount.toString().length();
				int countCss = doc.getElementsByTag("style").toString()
						.length()
						+ doc.getElementsByAttribute("style").toString()
								.length() + countchars;

				label = new Label(0, 34, "Total Characters:");
				wsheet.addCell(label);
				number = new Number(pluser, 34, +Countchar);
				wsheet.addCell(number);

				if (Countchar
						- (doc.select("body").text().length() + countscriptchar
								+ countCss + comchar + countBlank) > 0) {
					label = new Label(0, 35, "HTML characters:");
					wsheet.addCell(label);
					number = new Number(
							pluser,
							35,
							+(Countchar - (doc.select("body").text().length()
									+ countscriptchar + countCss + comchar + countBlank)));
					wsheet.addCell(number);
				}

				else {
					System.out
							.println("HTML characters: "
									+ (Countchar - (doc.select("body").text()
											.length()
											+ countscriptchar
											+ countCss
											+ comchar + countBlank)
											* (-1)));
					label = new Label(0, 35, "HTML characters:");
					wsheet.addCell(label);
					number = new Number(
							pluser,
							35,
							(Countchar - (doc.select("body").text().length()
									+ countscriptchar + countCss + comchar + countBlank)
									* (-1)));
					wsheet.addCell(number);
				}

				label = new Label(0, 36, "Total Script Characters:");
				wsheet.addCell(label);
				number = new Number(pluser, 36, +(Countchar - (doc
						.select("body").text().length()
						+ countscriptchar + countCss + comchar + countBlank)
						* (-1)));
				wsheet.addCell(number);
				label = new Label(0, 37, "Total Inline Script Characters:");
				wsheet.addCell(label);
				number = new Number(pluser, 37, +scriptinline.toString()
						.length());
				wsheet.addCell(number);

				/**
				 * System.out
				 * .println("Total inline Script characters (Compressed): " +
				 * compressedHtml.length());
				 **/
				label = new Label(0, 38, "Total External Script Characters:");
				wsheet.addCell(label);
				number = new Number(pluser, 38, +uncomprscript);
				wsheet.addCell(number);

				/**
				 * System.out
				 * .println("Total External Script characters (Compressed): " +
				 * extcharcount);
				 **/

				label = new Label(0, 39, "Total CSS Characters:");
				wsheet.addCell(label);
				number = new Number(pluser, 39, (countCss + uncomprcss));
				wsheet.addCell(number);

				label = new Label(0, 40, "Total External Css characters:");
				wsheet.addCell(label);
				number = new Number(pluser, 40, uncomprcss);
				wsheet.addCell(number);

				/**
				 * System.out
				 * .println("Total External Css characters (Compressed): " +
				 * comprcss);
				 **/
				label = new Label(0, 41, "Total Inline CSS Characters:");
				wsheet.addCell(label);
				number = new Number(pluser, 41, countCss);
				wsheet.addCell(number);
				label = new Label(0, 42, "Total Comment Characters:");
				wsheet.addCell(label);
				number = new Number(pluser, 42, comchar);
				wsheet.addCell(number);
				label = new Label(0, 43, "Total Whitespace Characters:");
				wsheet.addCell(label);
				number = new Number(pluser, 43, countBlank);
				wsheet.addCell(number);
				label = new Label(0, 44, "Total Text Charachters:");
				wsheet.addCell(label);
				number = new Number(pluser, 44, doc.select("body").text()
						.length());
				wsheet.addCell(number);

				try (FileOutputStream fop = new FileOutputStream(file)) {
					// if file doesn't exists, then create it
					if (!file.exists()) {
						file.createNewFile();
					}
					byte[] contentInBytes = doctoString.getBytes();
					fop.write(contentInBytes);
					fop.flush();
					fop.close();
				}
				// Count chars

				// Halstead
				int voc = da + dt + valuenum, len = att + totalval
						+ doc.getAllElements().size();
				label = new Label(0, 45, "Halstead HTML Vocabulary:");
				wsheet.addCell(label);
				number = new Number(pluser, 45, +voc);
				wsheet.addCell(number);

				label = new Label(0, 46, "Halstead HTML Length:");
				wsheet.addCell(label);
				number = new Number(pluser, 46, +len);
				wsheet.addCell(number);

				label = new Label(0, 47, "Halstead HTML Volume:");
				wsheet.addCell(label);
				number = new Number(pluser, 47, +(len * (log2(voc))));
				wsheet.addCell(number);
				// Halstead

				// Halstead HTML 5
				int voc5 = da + dtags5 + valuenum, len5 = totalval + att + h;

				label = new Label(0, 48, "Halstead HTML5 Vocabulary:");
				wsheet.addCell(label);
				number = new Number(pluser, 48, +voc5);
				wsheet.addCell(number);
				label = new Label(0, 49, "Halstead HTML5 Length:");
				wsheet.addCell(label);
				number = new Number(pluser, 49, +len5);
				wsheet.addCell(number);
				label = new Label(0, 50, "Halstead HTML5 Volume:");
				wsheet.addCell(label);
				number = new Number(pluser, 50, +(len5 * (log2(voc5))));
				wsheet.addCell(number);

				// Page Ranking
				AlexaSEO obj = new AlexaSEO();

				label = new Label(0, 51,
						"Alexa World Ranking(lower is better):");
				wsheet.addCell(label);
				number = new Number(pluser, 51, +obj.getAlexaRanking(line1));
				wsheet.addCell(number);

				GoogleSeoHelper obj2 = new GoogleSeoHelper();

				label = new Label(0, 52, "Google Page Rank(higher is better):");
				wsheet.addCell(label);
				number = new Number(pluser, 52, +obj2.getPR(line1));
				wsheet.addCell(number);
				System.out
						.println("(higher is better) Google Page rank: "
								+ obj2.getPR(line1)
								+ "\n "
								+ "\n "
								+ "------------------------------------------------------------------------------------"
								+ "\n");
				// Page Ranking

				pluser++;
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		wworkbook.write();
		wworkbook.close();

	}

	// MAIN PROGRAM

	// Duplicate Variables in array Counter
	public static Set<String> findDuplicates(
			List<String> listContainingDuplicates) {
		final Set<String> setToReturn = new HashSet<String>();
		final Set<String> set1 = new HashSet<String>();
		for (String yourInt : listContainingDuplicates) {
			if (!set1.add(yourInt)) {
				setToReturn.add(yourInt);
			}
		}
		return setToReturn;
	}

	// Duplicate Variables in array Counter

	// Log Base 2
	public static double logb(double a, double b) {
		return Math.log(a) / Math.log(b);
	}

	public static double log2(double a) {
		return logb(a, 2);
	}
	// Log Base 2
}
