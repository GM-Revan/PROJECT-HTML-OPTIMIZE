package projectmain;

/**
 * TECHNOLOGICAL EDUCATIONAL INSTITUTE OF MESSOLONGHI.
 * 
 * HTML Optimization Statistics Algorithm by George Michalitsis & Kiriakos Mpiziklis 2014.
 * 
 * You may use this code any way you wish, private, educational, or commercial.
 * It's free. See: https://github.com/GM-Revan/PROJECT-HTML-OPTIMIZE/blob/master/HTML_PARSER2.java
 * 
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeVisitor;
import org.apache.commons.io.output.TeeOutputStream;
import com.googlecode.htmlcompressor.compressor.HtmlCompressor;

public class HTML_PARSER {
	static int domcounter = 0;
	static int domav = 0;
	static int domax = 0;
	static int tables = 0;

	// MAIN PROGRAM
	public static void main(String[] args) {
		Document doc;
		HtmlCompressor compressor = new HtmlCompressor();
		// TeeoutputStream File writer

		try {

			File f = new File("c:/Output.txt");
			if (!f.exists()) {
				try {
					f.createNewFile();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			try {
				FileOutputStream fos = new FileOutputStream(f);

				// we will want to print in standard "System.out" and in "file"

				TeeOutputStream myOut = new TeeOutputStream(System.out, fos);
				PrintStream ps = new PrintStream(myOut);
				System.setOut(ps);
			} catch (Exception e) {
				e.printStackTrace();
			}

			// TeeoutputStream File writer

			// Connect to TXT Link

			File link = new File("C:/links.txt");
			String line1 = null;

			Scanner bigscanner = new Scanner(link);
			while (bigscanner.hasNextLine()) {
				line1 = bigscanner.nextLine();
				System.out.println("Link: " + line1);

				doc = Jsoup.connect(line1).timeout(10 * 4000)
						.ignoreHttpErrors(true).followRedirects(true).get();
				// Connect to TXT Link
				int c = 0, commentsAmount = 0;

				// Whitespace count

				String doctoString = doc.toString();
				int countBlank = 0;

				for (int i = 0; i < doctoString.length(); i++) {
					if (Character.isWhitespace(doctoString.charAt(i))) {
						countBlank++;
					}
				}

				// Whitespace count
				// flash inside HTML
				int flash = 0;

				for (Element vers : doc.select("[content*=.swf]")) {
					flash++;

				}
				for (Element vers : doc.select("[src*=.swf]")) {
					flash++;
				}

				for (Element scriptElement : doc.getElementsByTag("script")) {
					String elemenscript = scriptElement.toString();
					if (elemenscript.contains(".swf")) {
						flash++;
						break;

					}
				}

				// flash inside HTML

				// Version
				int intIndex2 = 0;
				for (Element e : doc.getAllElements()) {
					for (Node n : e.childNodes()) {
						if (n instanceof Comment) {
							String o = n.toString();
							intIndex2 = o.indexOf("WordPress");
							if (intIndex2 == -1) {
							} else {
								System.out.println("\nCMS :Wordpress ");
								break;
							}
						}
					}
				}
				for (Element vers : doc.select("[content*=Joomla!]")) {
					System.out.println("\nCMS: Joomla!");
					break;
				}
				for (Element vers : doc.select("[content*=Drupal]")) {
					System.out.println("\nCMS: Drupal");
					break;
				}
				List<Node> nods = doc.childNodes();
				for (Node node : nods) {
					if (node instanceof DocumentType) {
						DocumentType documentType = (DocumentType) node;
						if (documentType.attr("publicid").length() > 1) {
							System.out.println("\nVersion:"
									+ documentType.attr("publicid") + "\n");
						} else {
							System.out.println("\nVersion: HTML 5\n");

						}
					}
				}
				// Version

				// Comments
				int comchar = 0;
				for (Element e : doc.getAllElements()) {
					for (Node n : e.childNodes()) {
						if (n instanceof Comment) {
							comchar = comchar + n.toString().length();
							commentsAmount++;
							String o = n.toString();
							int intIndex = o.indexOf("WordPress");
							if (intIndex == -1) {

							} else {
								System.out.println("CMS :Wordpress ");
							}
						}
					}
				}
				// Comments

				/**
				 * // Duplicate IDs String idname2; List<String> idlist = new
				 * LinkedList<String>(); for (Element element2 :
				 * doc.getAllElements()) { idname2 = element2.id();
				 * idlist.add(idname2.toString()); } // Duplicate IDs
				 */
				// IdLength
				float tid = 0;
				List<String> idval = new ArrayList<String>();
				String idname;
				int idcounter = 0;
				float l = 0, average2 = 0;
				for (Element element2 : doc.getAllElements()) {
					idname = element2.id();
					if (idname.length() > 0)
						idcounter++;
					idval.add(idname.toString());

				}

				for (String pointer : idval) {
					average2 = pointer.length() + average2;
					l++;
				}
				if (average2 != 0) {
					tid = average2 / l;
				}
				// IdLength

				// Classlength
				float g = 0, average = 0;
				float tclass = 0;
				int classcounter = 0;
				List<String> classval = new ArrayList<String>();
				for (Element element2 : doc.getAllElements()) {
					for (String attribute : element2.classNames()) {

						if (attribute.length() > 0) {
							classcounter++;
							classval.add(attribute.toString());
						}
					}
				}
				int disclass = new HashSet<String>(classval).size();
				for (String pointer : classval) {
					average = pointer.length() + average;
					g++;
				}
				if (average != 0) {
					tclass = average / g;
				}
				// Classlength

				// Attribute values
				int totalval = 0;
				List<String> attval = new ArrayList<String>();
				for (Element element : doc.getAllElements()) {
					for (org.jsoup.nodes.Attribute attribute : element
							.attributes()) {
						String lol = attribute.getValue();
						attval.add(lol.toString());
						if (lol != null && !lol.isEmpty()) {
							totalval++;
						}
					}
				}
				int valuenum = new HashSet<String>(attval).size();
				// Attribute values

				// DOM
				doc.traverse(new NodeVisitor() {
					public void head(Node node, int depth) {
						if (!(node instanceof TextNode)) {
							domav = domav + depth;
							domcounter++;
							if (domax < depth) {
								domax = depth;
							}
						}
					}

					public void tail(Node node, int depth) {
					}
				});
				int totaldom = domav / domcounter;
				// DOM

				// External Css
				int countchars = 0;
				for (Element element : doc.select("[rel]")) {
					if (element.attr("rel").contains("stylesheet")) {
						countchars = element.toString().length() + countchars;
						c++;
					}
				}

				// retrieve external Css
				Document doccss;
				int uncomprcss = 0;

				for (Element element : doc.getElementsByTag("link")) {
					for (Element csselement : element
							.getElementsByAttributeValue("rel", "stylesheet")) {
						String absUrl = element.absUrl("href");
						if (absUrl.length() > 0) {
							doccss = Jsoup.connect(absUrl)
									.ignoreContentType(true).get();
							uncomprcss = uncomprcss
									+ doccss.toString().length();
						}

					}
				}
				// retrieve external css

				// external Css
				// css head
				Element s = doc.body(), s2 = doc.head();
				int numhead = 0;
				for (Element element : s2.select("[rel]")) {
					if (element.attr("rel").contains("stylesheet")) {
						numhead++;
					}
				}
				int d = 0, stylebody = s.getElementsByTag("style").size()
						+ s.getElementsByAttribute("style").size(), stylehead = s2
						.getElementsByTag("style").size()
						+ s2.getElementsByAttribute("style").size();
				for (Element element : s.select("[rel]")) {
					if (element.attr("rel").contains("stylesheet")) {
						d++;
					}
				}

				int total = d + stylebody;
				String name;
				if (total > 0) {
					name = "FALSE";
				} else {
					name = "TRUE";
				}

				// css head
				// styles
				int style = doc.getElementsByTag("style").size()
						+ doc.getElementsByAttribute("style").size();
				// styles

				// scripts external head body comments

				int se = 0, se2 = 0;
				Element scr = doc.head();
				Element scr2 = doc.body();

				List<String> scriptinline = new ArrayList<String>();
				for (Element element : doc.getElementsByTag("script")) {
					if (!element.hasAttr("src")) {
						scriptinline.add(element.toString());

					}
				}

				compressor.setCompressJavaScript(true);
				String compressedHtml = compressor.compress(scriptinline
						.toString());

				Elements src = scr.select("script");
				// retrieve external Scripts
				Document docscript;
				int extcharcount = 0, uncomprscript = 0;
				String compressedscripts;
				for (Element element : doc.getElementsByTag("script")) {
					String absUrl = element.absUrl("src");
					if (absUrl.length() > 0) {
						docscript = Jsoup.connect(absUrl)
								.ignoreContentType(true).get();
						compressedscripts = compressor.compress(docscript
								.toString());
						extcharcount = extcharcount
								+ compressedscripts.length();
						uncomprscript = uncomprscript
								+ docscript.toString().length();
					}

				}
				// retrieve external Scripts
				for (Element element : src.select("script[src]")) {
					se++;
				}
				Elements src2 = scr2.select("script");
				for (Element element : src2.select("script[src]")) {
					se2++;
				}
				// scripts external head body comments

				// HTML5 Tags
				File text = new File("C:/html5tags.txt");
				int h = 0;
				try {

					Scanner scanner = new Scanner(text);
					while (scanner.hasNextLine()) {
						String line = scanner.nextLine();
						h = doc.select(line).size() + h;
					}
					scanner.close();
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
				// HTML5 Tags

				// HTML5 Distinct Tags

				int dtags5 = 0;
				File tags5 = new File("C:/html5tags.txt");
				try {

					Scanner scanner = new Scanner(tags5);

					while (scanner.hasNextLine()) {
						String line = scanner.nextLine();
						if (doc.getElementsByTag(line).size() > 0)
							dtags5++;
					}
					scanner.close();
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
				// HTML5 Distinct Tags

				// tags
				List<String> tags = new ArrayList<String>();
				for (Element e : doc.getAllElements()) {
					tags.add(e.tagName().toLowerCase());
				}
				int dt = new HashSet<String>(tags).size();
				// tags
				// Total and Distinct Attributes
				int att = 0;
				List<String> atts = new ArrayList<String>();
				for (Element element : doc.getAllElements()) {
					for (org.jsoup.nodes.Attribute attribute : element
							.attributes()) {
						attribute.setValue("0");
						atts.add(attribute.toString());
						att++;
					}
				}
				int da = new HashSet<String>(atts).size();
				// Total and Distinct Attributes
				// Output
				System.out.println("Total Comments: " + commentsAmount + "\n");
				System.out.println("Scripts inside HTML: "
						+ doc.getElementsByTag("script").size());
				System.out.println("External Scripts inside Head: " + se);
				System.out.println("External Scripts inside Body: " + se2);
				System.out.println("Internal Scripts inside Head: "
						+ (scr.getElementsByTag("script").size() - se));

				System.out
						.println("Internal Scripts inside Body: "
								+ (scr2.getElementsByTag("script").size() - se2)
								+ "\n");

				System.out
						.println("Total tags: " + doc.getAllElements().size());
				System.out.println("Distinct tags:  " + dt + "\n");
				System.out.println("HTML 5 Total tags: " + h);
				System.out.println("HTML 5 Distinct tags: " + dtags5);
				try {

					Scanner scanner = new Scanner(text);
					while (scanner.hasNextLine()) {
						String line = scanner.nextLine();
						h = doc.select(line).size() + h;
						if (doc.select(line).size() > 0) {
							System.out.println("Html5 tagname:" + line);
							System.out.println("Html5 tag appearance:"
									+ doc.select(line).size() + "\n");
						}
					}

				} catch (FileNotFoundException e) {
					e.printStackTrace();
				}
				System.out.println("total attributes " + att);
				System.out.println("Distinct Attributes: " + da);
				System.out.println("total attribute Values " + totalval);
				System.out.println("Distinct Attribute Values: " + valuenum
						+ "\n");
				System.out.println("Styles inside HTML: " + style);
				System.out.println("total style tags: "
						+ doc.getElementsByTag("style").size());
				System.out.println("total style atts: "
						+ doc.getElementsByAttribute("style").size());
				System.out.println("external css files: " + c);
				System.out.println("CSSinside head: " + name);
				System.out.println("Styles(tags and atts) Inside Body: "
						+ stylebody);
				System.out.println("Styles(tags and atts) Inside Head: "
						+ stylehead);

				System.out.println("External Css Inside Head: " + numhead);
				System.out.println("External Css Inside Body: " + d + "\n");

				System.out.println("DOM average depth: " + totaldom);
				System.out.println("DOM max depth: " + domax + "\n");
				System.out.println("Total ID names: " + idcounter);

				System.out.println("Total Class names: " + classcounter);
				System.out.println("Total Distinct Class names: " + disclass);
				System.out.println("Class Average Length: " + tclass);
				System.out.println("ID Average Length: " + tid + "\n");
				System.out.println("JApplets inside html: "
						+ doc.getElementsByTag("applet").size());
				System.out
						.println("Flash Content inside html: " + flash + "\n");
				System.out.println("Nested tables: "
						+ doc.select("table table").size() + "\n");
				// System.out.println("Duplicate IDs are " +
				// findDuplicates(idlist));
				// Output
				// Count Chars

				File file = new File("c:/HTML.txt");

				int Countchar = doctoString.length();
				Elements scriptcount = doc.getElementsByTag("script");
				int countscriptchar = scriptcount.toString().length();
				int countCss = doc.getElementsByTag("style").toString()
						.length()
						+ doc.getElementsByAttribute("style").toString()
								.length() + countchars;
				System.out.println("Total characters: " + Countchar);
				System.out
						.println("HTML characters: "
								+ ((doc.select("body").text().length()
										+ countscriptchar + countCss + comchar + countBlank) - Countchar));
				System.out.println("Total Script characters: "
						+ (countscriptchar + extcharcount));
				System.out.println("Total inline Script characters: "
						+ scriptinline.toString().length());
				System.out
						.println("Total inline Script characters without Comments: "
								+ compressedHtml.length());
				System.out.println("Total External Script characters : "
						+ extcharcount);
				System.out
						.println("Total External Script characters without Comments: "
								+ uncomprscript);

				System.out.println("Total Css characters: "
						+ (countCss + uncomprcss));
				System.out.println("Total External Css characters: "
						+ uncomprcss);
				System.out.println("Total inline Css characters: " + countCss);
				System.out.println("Total Comment characters: " + comchar);
				System.out
						.println("Total Whitespace characters: " + countBlank);
				System.out.println("Total text Charachters: "
						+ doc.select("body").text().length());
				try (FileOutputStream fop = new FileOutputStream(file)) {
					// if file doesn't exists, then create it
					if (!file.exists()) {
						file.createNewFile();
					}
					byte[] contentInBytes = doctoString.getBytes();
					fop.write(contentInBytes);
					fop.flush();
					fop.close();
				}
				// Count chars

				// Halstead
				int voc = da + dt + valuenum, len = att + totalval
						+ doc.getAllElements().size();
				System.out.println("\n     Halstead Complexity Measures\n");
				System.out.println("Vocabulary= " + voc);
				System.out.println("Length= " + len);
				System.out.println("Volume= " + (len * (log2(voc))));
				// Halstead

				// Halstead HTML 5
				int voc5 = da + dtags5 + valuenum, len5 = totalval + att + h;
				System.out
						.println("\n     Halstead Complexity Measures <<HTml 5 tags>>\n");
				System.out.println("Vocabulary= " + voc5);
				System.out.println("Length= " + len5);
				System.out.println("Volume= " + (len5 * (log2(voc5))));
				// Halstead HTML 5

				// Page Ranking
				System.out.println("\n     PAGE RANKING\n");
				AlexaSEO obj = new AlexaSEO();
				System.out.println("(lower is better) World Ranking : "
						+ obj.getAlexaRanking(line1));
				GoogleSeoHelper obj2 = new GoogleSeoHelper();
				System.out
						.println("(higher is better) Google Page rank: "
								+ obj2.getPR(line1)
								+ "\n "
								+ "\n "
								+ "------------------------------------------------------------------------------------"
								+ "\n");
				// Page Ranking
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	// MAIN PROGRAM

	// Duplicate Variables in array Counter
	public static Set<String> findDuplicates(
			List<String> listContainingDuplicates) {
		final Set<String> setToReturn = new HashSet<String>();
		final Set<String> set1 = new HashSet<String>();
		for (String yourInt : listContainingDuplicates) {
			if (!set1.add(yourInt)) {
				setToReturn.add(yourInt);
			}
		}
		return setToReturn;
	}

	// Duplicate Variables in array Counter

	// Log Base 2
	public static double logb(double a, double b) {
		return Math.log(a) / Math.log(b);
	}

	public static double log2(double a) {
		return logb(a, 2);
	}
	// Log Base 2
}
